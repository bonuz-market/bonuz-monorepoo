/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BonuzTokensDraft2 {
  export type VoucherProgramStruct = {
    issuer: PromiseOrValue<string>;
    programName: PromiseOrValue<string>;
    programDesc: PromiseOrValue<string>;
  };

  export type VoucherProgramStructOutput = [string, string, string] & {
    issuer: string;
    programName: string;
    programDesc: string;
  };

  export type EventStruct = {
    organizer: PromiseOrValue<string>;
    eventName: PromiseOrValue<string>;
    eventDesc: PromiseOrValue<string>;
    startDate: PromiseOrValue<BigNumberish>;
    endDate: PromiseOrValue<BigNumberish>;
  };

  export type EventStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    organizer: string;
    eventName: string;
    eventDesc: string;
    startDate: BigNumber;
    endDate: BigNumber;
  };

  export type CourseStruct = {
    instructor: PromiseOrValue<string>;
    courseName: PromiseOrValue<string>;
    courseDesc: PromiseOrValue<string>;
  };

  export type CourseStructOutput = [string, string, string] & {
    instructor: string;
    courseName: string;
    courseDesc: string;
  };

  export type LoyaltyProgramStruct = {
    issuer: PromiseOrValue<string>;
    programName: PromiseOrValue<string>;
    programDesc: PromiseOrValue<string>;
  };

  export type LoyaltyProgramStructOutput = [string, string, string] & {
    issuer: string;
    programName: string;
    programDesc: string;
  };

  export type CommunityStruct = {
    organizer: PromiseOrValue<string>;
    communityName: PromiseOrValue<string>;
    communityDesc: PromiseOrValue<string>;
  };

  export type CommunityStructOutput = [string, string, string] & {
    organizer: string;
    communityName: string;
    communityDesc: string;
  };

  export type TokenMetadataStruct = {
    tokenType: PromiseOrValue<string>;
    index: PromiseOrValue<BigNumberish>;
    NFTdescription: PromiseOrValue<string>;
    imageURL: PromiseOrValue<string>;
    isSoulBound: PromiseOrValue<boolean>;
    redeemDate: PromiseOrValue<BigNumberish>;
    expiryDate: PromiseOrValue<BigNumberish>;
    points: PromiseOrValue<BigNumberish>;
  };

  export type TokenMetadataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenType: string;
    index: BigNumber;
    NFTdescription: string;
    imageURL: string;
    isSoulBound: boolean;
    redeemDate: BigNumber;
    expiryDate: BigNumber;
    points: BigNumber;
  };
}

export interface BonuzTokensDraft2Interface extends utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addLoyaltyPoints(uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "createCommunity(address,string,string)": FunctionFragment;
    "createCourse(address,string,string)": FunctionFragment;
    "createEvent(address,string,string,uint256,uint256)": FunctionFragment;
    "createLoyaltyProgram(address,string,string)": FunctionFragment;
    "createVoucherProgram(address,string,string)": FunctionFragment;
    "getPartners()": FunctionFragment;
    "getTokenMetadata(uint256)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintCertificate(uint256,address,string,string)": FunctionFragment;
    "mintLoyalty(uint256,address,uint256,string,string,uint256)": FunctionFragment;
    "mintMembership(uint256,address,string,string,bool)": FunctionFragment;
    "mintProofOfAttendance(uint256,address,string,string)": FunctionFragment;
    "mintVoucher(uint256,address,string,string,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeemLoyaltyPoints(uint256,uint256)": FunctionFragment;
    "redeemVoucher(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(uint256,string)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseContract()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmin"
      | "addLoyaltyPoints"
      | "balanceOf"
      | "balanceOfBatch"
      | "createCommunity"
      | "createCourse"
      | "createEvent"
      | "createLoyaltyProgram"
      | "createVoucherProgram"
      | "getPartners"
      | "getTokenMetadata"
      | "isAdmin"
      | "isApprovedForAll"
      | "mintCertificate"
      | "mintLoyalty"
      | "mintMembership"
      | "mintProofOfAttendance"
      | "mintVoucher"
      | "name"
      | "owner"
      | "pauseContract"
      | "paused"
      | "redeemLoyaltyPoints"
      | "redeemVoucher"
      | "removeAdmin"
      | "renounceOwnership"
      | "revoke"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "supportsInterface"
      | "transferOwnership"
      | "unpauseContract"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLoyaltyPoints",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommunity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoyaltyProgram",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoucherProgram",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCertificate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLoyalty",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMembership",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintProofOfAttendance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVoucher",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemLoyaltyPoints",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoyaltyProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoucherProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintProofOfAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemLoyaltyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "LoyaltyPointsAdded(uint256,uint256)": EventFragment;
    "LoyaltyPointsRedeemed(uint256,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProgramCreated(string,uint256,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VoucherRedeemed(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoyaltyPointsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoyaltyPointsRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface LoyaltyPointsAddedEventObject {
  tokenId: BigNumber;
  points: BigNumber;
}
export type LoyaltyPointsAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LoyaltyPointsAddedEventObject
>;

export type LoyaltyPointsAddedEventFilter =
  TypedEventFilter<LoyaltyPointsAddedEvent>;

export interface LoyaltyPointsRedeemedEventObject {
  tokenId: BigNumber;
  points: BigNumber;
  redeemer: string;
  redeemDate: BigNumber;
}
export type LoyaltyPointsRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  LoyaltyPointsRedeemedEventObject
>;

export type LoyaltyPointsRedeemedEventFilter =
  TypedEventFilter<LoyaltyPointsRedeemedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProgramCreatedEventObject {
  programType: string;
  programId: BigNumber;
  business: string;
}
export type ProgramCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  ProgramCreatedEventObject
>;

export type ProgramCreatedEventFilter = TypedEventFilter<ProgramCreatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VoucherRedeemedEventObject {
  tokenId: BigNumber;
  redeemer: string;
  redeemDate: BigNumber;
}
export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  VoucherRedeemedEventObject
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export interface BonuzTokensDraft2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BonuzTokensDraft2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    createCommunity(
      _organizer: PromiseOrValue<string>,
      _communityName: PromiseOrValue<string>,
      _communityDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCourse(
      _instructor: PromiseOrValue<string>,
      _courseName: PromiseOrValue<string>,
      _courseDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _organizer: PromiseOrValue<string>,
      _eventName: PromiseOrValue<string>,
      _eventDesc: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLoyaltyProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVoucherProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPartners(
      overrides?: CallOverrides
    ): Promise<
      [
        BonuzTokensDraft2.VoucherProgramStructOutput[],
        BonuzTokensDraft2.EventStructOutput[],
        BonuzTokensDraft2.CourseStructOutput[],
        BonuzTokensDraft2.LoyaltyProgramStructOutput[],
        BonuzTokensDraft2.CommunityStructOutput[]
      ]
    >;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft2.TokenMetadataStructOutput]>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintLoyalty(
      _loyaltyProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMembership(
      _communityId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintVoucher(
      _voucherProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLoyaltyPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    _points: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  createCommunity(
    _organizer: PromiseOrValue<string>,
    _communityName: PromiseOrValue<string>,
    _communityDesc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCourse(
    _instructor: PromiseOrValue<string>,
    _courseName: PromiseOrValue<string>,
    _courseDesc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _organizer: PromiseOrValue<string>,
    _eventName: PromiseOrValue<string>,
    _eventDesc: PromiseOrValue<string>,
    _startDate: PromiseOrValue<BigNumberish>,
    _endDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLoyaltyProgram(
    _issuer: PromiseOrValue<string>,
    _programName: PromiseOrValue<string>,
    _programDesc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVoucherProgram(
    _issuer: PromiseOrValue<string>,
    _programName: PromiseOrValue<string>,
    _programDesc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPartners(
    overrides?: CallOverrides
  ): Promise<
    [
      BonuzTokensDraft2.VoucherProgramStructOutput[],
      BonuzTokensDraft2.EventStructOutput[],
      BonuzTokensDraft2.CourseStructOutput[],
      BonuzTokensDraft2.LoyaltyProgramStructOutput[],
      BonuzTokensDraft2.CommunityStructOutput[]
    ]
  >;

  getTokenMetadata(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft2.TokenMetadataStructOutput>;

  isAdmin(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintCertificate(
    _courseId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintLoyalty(
    _loyaltyProgramId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _initialPoints: PromiseOrValue<BigNumberish>,
    _desc: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _expiryDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMembership(
    _communityId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _isSoulBound: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintProofOfAttendance(
    _eventId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintVoucher(
    _voucherProgramId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _expiryDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeemLoyaltyPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    _points: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemVoucher(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _index: PromiseOrValue<BigNumberish>,
    _type: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    createCommunity(
      _organizer: PromiseOrValue<string>,
      _communityName: PromiseOrValue<string>,
      _communityDesc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCourse(
      _instructor: PromiseOrValue<string>,
      _courseName: PromiseOrValue<string>,
      _courseDesc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _organizer: PromiseOrValue<string>,
      _eventName: PromiseOrValue<string>,
      _eventDesc: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLoyaltyProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVoucherProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartners(
      overrides?: CallOverrides
    ): Promise<
      [
        BonuzTokensDraft2.VoucherProgramStructOutput[],
        BonuzTokensDraft2.EventStructOutput[],
        BonuzTokensDraft2.CourseStructOutput[],
        BonuzTokensDraft2.LoyaltyProgramStructOutput[],
        BonuzTokensDraft2.CommunityStructOutput[]
      ]
    >;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft2.TokenMetadataStructOutput>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLoyalty(
      _loyaltyProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMembership(
      _communityId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintVoucher(
      _voucherProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeemLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseContract(overrides?: CallOverrides): Promise<void>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "LoyaltyPointsAdded(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      points?: null
    ): LoyaltyPointsAddedEventFilter;
    LoyaltyPointsAdded(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      points?: null
    ): LoyaltyPointsAddedEventFilter;

    "LoyaltyPointsRedeemed(uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      points?: null,
      redeemer?: null,
      redeemDate?: null
    ): LoyaltyPointsRedeemedEventFilter;
    LoyaltyPointsRedeemed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      points?: null,
      redeemer?: null,
      redeemDate?: null
    ): LoyaltyPointsRedeemedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProgramCreated(string,uint256,address)"(
      programType?: PromiseOrValue<string> | null,
      programId?: PromiseOrValue<BigNumberish> | null,
      business?: null
    ): ProgramCreatedEventFilter;
    ProgramCreated(
      programType?: PromiseOrValue<string> | null,
      programId?: PromiseOrValue<BigNumberish> | null,
      business?: null
    ): ProgramCreatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VoucherRedeemed(uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      redeemer?: null,
      redeemDate?: null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      redeemer?: null,
      redeemDate?: null
    ): VoucherRedeemedEventFilter;
  };

  estimateGas: {
    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCommunity(
      _organizer: PromiseOrValue<string>,
      _communityName: PromiseOrValue<string>,
      _communityDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCourse(
      _instructor: PromiseOrValue<string>,
      _courseName: PromiseOrValue<string>,
      _courseDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _organizer: PromiseOrValue<string>,
      _eventName: PromiseOrValue<string>,
      _eventDesc: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLoyaltyProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVoucherProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPartners(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintLoyalty(
      _loyaltyProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMembership(
      _communityId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintVoucher(
      _voucherProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCommunity(
      _organizer: PromiseOrValue<string>,
      _communityName: PromiseOrValue<string>,
      _communityDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCourse(
      _instructor: PromiseOrValue<string>,
      _courseName: PromiseOrValue<string>,
      _courseDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _organizer: PromiseOrValue<string>,
      _eventName: PromiseOrValue<string>,
      _eventDesc: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLoyaltyProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVoucherProgram(
      _issuer: PromiseOrValue<string>,
      _programName: PromiseOrValue<string>,
      _programDesc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPartners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintLoyalty(
      _loyaltyProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMembership(
      _communityId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintVoucher(
      _voucherProgramId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemLoyaltyPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _points: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
