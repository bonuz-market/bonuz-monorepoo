/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BonuzTokensDraft1 {
  export type CourseStruct = {
    name: PromiseOrValue<string>;
    issuer: PromiseOrValue<string>;
    exists: PromiseOrValue<boolean>;
  };

  export type CourseStructOutput = [string, string, boolean] & {
    name: string;
    issuer: string;
    exists: boolean;
  };

  export type EventStruct = {
    name: PromiseOrValue<string>;
    organizer: PromiseOrValue<string>;
    startDate: PromiseOrValue<BigNumberish>;
    endDate: PromiseOrValue<BigNumberish>;
    exists: PromiseOrValue<boolean>;
  };

  export type EventStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    name: string;
    organizer: string;
    startDate: BigNumber;
    endDate: BigNumber;
    exists: boolean;
  };

  export type MembershipStruct = {
    name: PromiseOrValue<string>;
    issuer: PromiseOrValue<string>;
    exists: PromiseOrValue<boolean>;
  };

  export type MembershipStructOutput = [string, string, boolean] & {
    name: string;
    issuer: string;
    exists: boolean;
  };

  export type TokenMetadataStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenType: PromiseOrValue<BytesLike>;
    isSoulBound: PromiseOrValue<boolean>;
    exists: PromiseOrValue<boolean>;
  };

  export type TokenMetadataStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    boolean,
    boolean
  ] & {
    name: string;
    description: string;
    image: string;
    tokenId: BigNumber;
    tokenType: string;
    isSoulBound: boolean;
    exists: boolean;
  };

  export type ProgramStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    issuer: PromiseOrValue<string>;
    exists: PromiseOrValue<boolean>;
  };

  export type ProgramStructOutput = [
    string,
    string,
    string,
    string,
    boolean
  ] & {
    name: string;
    description: string;
    image: string;
    issuer: string;
    exists: boolean;
  };

  export type VoucherStruct = {
    expiryDate: PromiseOrValue<BigNumberish>;
    issuer: PromiseOrValue<string>;
    redeemedTime: PromiseOrValue<BigNumberish>;
    exists: PromiseOrValue<boolean>;
  };

  export type VoucherStructOutput = [BigNumber, string, BigNumber, boolean] & {
    expiryDate: BigNumber;
    issuer: string;
    redeemedTime: BigNumber;
    exists: boolean;
  };
}

export interface BonuzTokensDraft1Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addBusiness(address)": FunctionFragment;
    "addPoints(uint256,address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "createCourse(string,address)": FunctionFragment;
    "createEvent(string,address,uint256,uint256)": FunctionFragment;
    "createProgram(string,string,string,address)": FunctionFragment;
    "getCounter()": FunctionFragment;
    "getCourseCounter()": FunctionFragment;
    "getCourseData(uint256)": FunctionFragment;
    "getEventCounter()": FunctionFragment;
    "getEventData(uint256)": FunctionFragment;
    "getMembershipData(uint256)": FunctionFragment;
    "getMetadataOfAddress(address)": FunctionFragment;
    "getPoints(uint256,address)": FunctionFragment;
    "getProgramCounter()": FunctionFragment;
    "getProgramData(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTokenMetadata(uint256)": FunctionFragment;
    "getTokenURIsOfAddress(address)": FunctionFragment;
    "getTokensOfAddress(address)": FunctionFragment;
    "getVoucherData(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintCertificate(uint256,address,string,string)": FunctionFragment;
    "mintMembership(address,string,string,string,bool)": FunctionFragment;
    "mintProofOfAttendance(uint256,address,string,string)": FunctionFragment;
    "mintVoucher(address,string,string,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeemVoucher(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeBusiness(address)": FunctionFragment;
    "removePoints(uint256,address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "subscribeUser(uint256,address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpauseContract()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addAdmin"
      | "addBusiness"
      | "addPoints"
      | "balanceOf"
      | "balanceOfBatch"
      | "createCourse"
      | "createEvent"
      | "createProgram"
      | "getCounter"
      | "getCourseCounter"
      | "getCourseData"
      | "getEventCounter"
      | "getEventData"
      | "getMembershipData"
      | "getMetadataOfAddress"
      | "getPoints"
      | "getProgramCounter"
      | "getProgramData"
      | "getRoleAdmin"
      | "getTokenMetadata"
      | "getTokenURIsOfAddress"
      | "getTokensOfAddress"
      | "getVoucherData"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "mintCertificate"
      | "mintMembership"
      | "mintProofOfAttendance"
      | "mintVoucher"
      | "name"
      | "pauseContract"
      | "paused"
      | "redeemVoucher"
      | "removeAdmin"
      | "removeBusiness"
      | "removePoints"
      | "renounceRole"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "subscribeUser"
      | "supportsInterface"
      | "unpauseContract"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBusiness",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoints",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProgram",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataOfAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURIsOfAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOfAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCertificate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMembership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintProofOfAttendance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVoucher",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBusiness",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoints",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeUser",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBusiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCourseCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProgramCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgramData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURIsOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintProofOfAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBusiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CertificateMinted(uint256,address)": EventFragment;
    "CourseCreated(uint256,string)": EventFragment;
    "EventCreated(uint256,string)": EventFragment;
    "MembershipMinted(uint256,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PointsAdded(uint256,address,uint256)": EventFragment;
    "PointsRemoved(uint256,address,uint256)": EventFragment;
    "ProgramCreated(uint256,string)": EventFragment;
    "ProofOfAttendanceMinted(uint256,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenMinted(uint256,address,bytes32)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserSubscribed(uint256,address,uint256)": EventFragment;
    "VoucherRedeemed(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CertificateMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CourseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofOfAttendanceMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CertificateMintedEventObject {
  tokenId: BigNumber;
  recipient: string;
}
export type CertificateMintedEvent = TypedEvent<
  [BigNumber, string],
  CertificateMintedEventObject
>;

export type CertificateMintedEventFilter =
  TypedEventFilter<CertificateMintedEvent>;

export interface CourseCreatedEventObject {
  courseId: BigNumber;
  courseName: string;
}
export type CourseCreatedEvent = TypedEvent<
  [BigNumber, string],
  CourseCreatedEventObject
>;

export type CourseCreatedEventFilter = TypedEventFilter<CourseCreatedEvent>;

export interface EventCreatedEventObject {
  eventId: BigNumber;
  eventName: string;
}
export type EventCreatedEvent = TypedEvent<
  [BigNumber, string],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface MembershipMintedEventObject {
  tokenId: BigNumber;
  recipient: string;
}
export type MembershipMintedEvent = TypedEvent<
  [BigNumber, string],
  MembershipMintedEventObject
>;

export type MembershipMintedEventFilter =
  TypedEventFilter<MembershipMintedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PointsAddedEventObject {
  programId: BigNumber;
  recipient: string;
  pointsAdded: BigNumber;
}
export type PointsAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PointsAddedEventObject
>;

export type PointsAddedEventFilter = TypedEventFilter<PointsAddedEvent>;

export interface PointsRemovedEventObject {
  programId: BigNumber;
  recipient: string;
  pointsRemoved: BigNumber;
}
export type PointsRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PointsRemovedEventObject
>;

export type PointsRemovedEventFilter = TypedEventFilter<PointsRemovedEvent>;

export interface ProgramCreatedEventObject {
  programId: BigNumber;
  programName: string;
}
export type ProgramCreatedEvent = TypedEvent<
  [BigNumber, string],
  ProgramCreatedEventObject
>;

export type ProgramCreatedEventFilter = TypedEventFilter<ProgramCreatedEvent>;

export interface ProofOfAttendanceMintedEventObject {
  tokenId: BigNumber;
  recipient: string;
}
export type ProofOfAttendanceMintedEvent = TypedEvent<
  [BigNumber, string],
  ProofOfAttendanceMintedEventObject
>;

export type ProofOfAttendanceMintedEventFilter =
  TypedEventFilter<ProofOfAttendanceMintedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenMintedEventObject {
  tokenId: BigNumber;
  recipient: string;
  tokenType: string;
}
export type TokenMintedEvent = TypedEvent<
  [BigNumber, string, string],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UserSubscribedEventObject {
  programId: BigNumber;
  recipient: string;
  initialPoints: BigNumber;
}
export type UserSubscribedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UserSubscribedEventObject
>;

export type UserSubscribedEventFilter = TypedEventFilter<UserSubscribedEvent>;

export interface VoucherRedeemedEventObject {
  tokenId: BigNumber;
  redeemer: string;
}
export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, string],
  VoucherRedeemedEventObject
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export interface BonuzTokensDraft1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BonuzTokensDraft1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    createCourse(
      _name: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _name: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProgram(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCourseCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCourseData(
      _courseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.CourseStructOutput]>;

    getEventCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEventData(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.EventStructOutput]>;

    getMembershipData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.MembershipStructOutput]>;

    getMetadataOfAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.TokenMetadataStructOutput[]]>;

    getPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProgramCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProgramData(
      _programId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.ProgramStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.TokenMetadataStructOutput]>;

    getTokenURIsOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTokensOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVoucherData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonuzTokensDraft1.VoucherStructOutput]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMembership(
      _recipient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintVoucher(
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeUser(
      _programId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBusiness(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPoints(
    _programId: PromiseOrValue<BigNumberish>,
    _userAddress: PromiseOrValue<string>,
    _pointsToAdd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  createCourse(
    _name: PromiseOrValue<string>,
    _issuer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _name: PromiseOrValue<string>,
    _organizer: PromiseOrValue<string>,
    _startDate: PromiseOrValue<BigNumberish>,
    _endDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProgram(
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _issuer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getCourseCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getCourseData(
    _courseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.CourseStructOutput>;

  getEventCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getEventData(
    _eventId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.EventStructOutput>;

  getMembershipData(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.MembershipStructOutput>;

  getMetadataOfAddress(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.TokenMetadataStructOutput[]>;

  getPoints(
    _programId: PromiseOrValue<BigNumberish>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProgramCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getProgramData(
    _programId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.ProgramStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenMetadata(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.TokenMetadataStructOutput>;

  getTokenURIsOfAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokensOfAddress(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVoucherData(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonuzTokensDraft1.VoucherStructOutput>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintCertificate(
    _courseId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMembership(
    _recipient: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _isSoulBound: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintProofOfAttendance(
    _eventId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintVoucher(
    _recipient: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _expiryDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeemVoucher(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBusiness(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePoints(
    _programId: PromiseOrValue<BigNumberish>,
    _userAddress: PromiseOrValue<string>,
    _pointsToRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeUser(
    _programId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _initialPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpauseContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBusiness(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    createCourse(
      _name: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createEvent(
      _name: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProgram(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseData(
      _courseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.CourseStructOutput>;

    getEventCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getEventData(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.EventStructOutput>;

    getMembershipData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.MembershipStructOutput>;

    getMetadataOfAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.TokenMetadataStructOutput[]>;

    getPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProgramCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramData(
      _programId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.ProgramStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.TokenMetadataStructOutput>;

    getTokenURIsOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokensOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVoucherData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonuzTokensDraft1.VoucherStructOutput>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMembership(
      _recipient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVoucher(
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBusiness(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeUser(
      _programId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpauseContract(overrides?: CallOverrides): Promise<void>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CertificateMinted(uint256,address)"(
      tokenId?: null,
      recipient?: null
    ): CertificateMintedEventFilter;
    CertificateMinted(
      tokenId?: null,
      recipient?: null
    ): CertificateMintedEventFilter;

    "CourseCreated(uint256,string)"(
      courseId?: null,
      courseName?: null
    ): CourseCreatedEventFilter;
    CourseCreated(courseId?: null, courseName?: null): CourseCreatedEventFilter;

    "EventCreated(uint256,string)"(
      eventId?: null,
      eventName?: null
    ): EventCreatedEventFilter;
    EventCreated(eventId?: null, eventName?: null): EventCreatedEventFilter;

    "MembershipMinted(uint256,address)"(
      tokenId?: null,
      recipient?: null
    ): MembershipMintedEventFilter;
    MembershipMinted(
      tokenId?: null,
      recipient?: null
    ): MembershipMintedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PointsAdded(uint256,address,uint256)"(
      programId?: null,
      recipient?: null,
      pointsAdded?: null
    ): PointsAddedEventFilter;
    PointsAdded(
      programId?: null,
      recipient?: null,
      pointsAdded?: null
    ): PointsAddedEventFilter;

    "PointsRemoved(uint256,address,uint256)"(
      programId?: null,
      recipient?: null,
      pointsRemoved?: null
    ): PointsRemovedEventFilter;
    PointsRemoved(
      programId?: null,
      recipient?: null,
      pointsRemoved?: null
    ): PointsRemovedEventFilter;

    "ProgramCreated(uint256,string)"(
      programId?: null,
      programName?: null
    ): ProgramCreatedEventFilter;
    ProgramCreated(
      programId?: null,
      programName?: null
    ): ProgramCreatedEventFilter;

    "ProofOfAttendanceMinted(uint256,address)"(
      tokenId?: null,
      recipient?: null
    ): ProofOfAttendanceMintedEventFilter;
    ProofOfAttendanceMinted(
      tokenId?: null,
      recipient?: null
    ): ProofOfAttendanceMintedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TokenMinted(uint256,address,bytes32)"(
      tokenId?: null,
      recipient?: null,
      tokenType?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      tokenId?: null,
      recipient?: null,
      tokenType?: null
    ): TokenMintedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserSubscribed(uint256,address,uint256)"(
      programId?: null,
      recipient?: null,
      initialPoints?: null
    ): UserSubscribedEventFilter;
    UserSubscribed(
      programId?: null,
      recipient?: null,
      initialPoints?: null
    ): UserSubscribedEventFilter;

    "VoucherRedeemed(uint256,address)"(
      tokenId?: null,
      redeemer?: null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      tokenId?: null,
      redeemer?: null
    ): VoucherRedeemedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCourse(
      _name: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _name: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProgram(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseData(
      _courseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getEventData(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembershipData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadataOfAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProgramCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramData(
      _programId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURIsOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoucherData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMembership(
      _recipient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintVoucher(
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeUser(
      _programId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCourse(
      _name: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _name: PromiseOrValue<string>,
      _organizer: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProgram(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCourseCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCourseData(
      _courseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventData(
      _eventId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataOfAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProgramCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProgramData(
      _programId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMetadata(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenURIsOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensOfAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoucherData(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCertificate(
      _courseId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMembership(
      _recipient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _isSoulBound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintProofOfAttendance(
      _eventId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintVoucher(
      _recipient: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _expiryDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemVoucher(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBusiness(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePoints(
      _programId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      _pointsToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeUser(
      _programId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _initialPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
