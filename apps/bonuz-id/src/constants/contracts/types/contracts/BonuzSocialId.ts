/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BonuzSocialIdInterface extends utils.Interface {
  functions: {
    "getAllowedSocialLinks(string[])": FunctionFragment;
    "getIssuer(address)": FunctionFragment;
    "getUserProfileAndSocialLinks(address,string[])": FunctionFragment;
    "initialize(address[],string[])": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllowedSocialLink(string,bool)": FunctionFragment;
    "setIssuer(address,bool)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userProfiles(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllowedSocialLinks"
      | "getIssuer"
      | "getUserProfileAndSocialLinks"
      | "initialize"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setAllowedSocialLink"
      | "setIssuer"
      | "setPause"
      | "transferOwnership"
      | "userProfiles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllowedSocialLinks",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfileAndSocialLinks",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSocialLink",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllowedSocialLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfileAndSocialLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSocialLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;

  events: {
    "AllowedSocialLinkSet(string,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IssuerSet(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SocialLinkSet(address,string,string)": EventFragment;
    "SocialLinksSet(address,string[],string[])": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserHandleSet(address,string)": EventFragment;
    "UserImageSet(address,string)": EventFragment;
    "UserNameSet(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedSocialLinkSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SocialLinkSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SocialLinksSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserHandleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserImageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserNameSet"): EventFragment;
}

export interface AllowedSocialLinkSetEventObject {
  platform: string;
  allowed: boolean;
}
export type AllowedSocialLinkSetEvent = TypedEvent<
  [string, boolean],
  AllowedSocialLinkSetEventObject
>;

export type AllowedSocialLinkSetEventFilter =
  TypedEventFilter<AllowedSocialLinkSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IssuerSetEventObject {
  account: string;
  isIssuer: boolean;
}
export type IssuerSetEvent = TypedEvent<
  [string, boolean],
  IssuerSetEventObject
>;

export type IssuerSetEventFilter = TypedEventFilter<IssuerSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SocialLinkSetEventObject {
  user: string;
  platform: string;
  link: string;
}
export type SocialLinkSetEvent = TypedEvent<
  [string, string, string],
  SocialLinkSetEventObject
>;

export type SocialLinkSetEventFilter = TypedEventFilter<SocialLinkSetEvent>;

export interface SocialLinksSetEventObject {
  user: string;
  platforms: string[];
  links: string[];
}
export type SocialLinksSetEvent = TypedEvent<
  [string, string[], string[]],
  SocialLinksSetEventObject
>;

export type SocialLinksSetEventFilter = TypedEventFilter<SocialLinksSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UserHandleSetEventObject {
  user: string;
  handle: string;
}
export type UserHandleSetEvent = TypedEvent<
  [string, string],
  UserHandleSetEventObject
>;

export type UserHandleSetEventFilter = TypedEventFilter<UserHandleSetEvent>;

export interface UserImageSetEventObject {
  user: string;
  profileImage: string;
}
export type UserImageSetEvent = TypedEvent<
  [string, string],
  UserImageSetEventObject
>;

export type UserImageSetEventFilter = TypedEventFilter<UserImageSetEvent>;

export interface UserNameSetEventObject {
  user: string;
  name: string;
}
export type UserNameSetEvent = TypedEvent<
  [string, string],
  UserNameSetEventObject
>;

export type UserNameSetEventFilter = TypedEventFilter<UserNameSetEvent>;

export interface BonuzSocialId extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BonuzSocialIdInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllowedSocialLinks(
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    getIssuer(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserProfileAndSocialLinks(
      _user: PromiseOrValue<string>,
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string, string, string, string[]]>;

    initialize(
      _initialIssuers: PromiseOrValue<string>[],
      _initialAllowedPlatforms: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowedSocialLink(
      _platform: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIssuer(
      _account: PromiseOrValue<string>,
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userProfiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        name: string;
        profileImage: string;
        handle: string;
      }
    >;
  };

  getAllowedSocialLinks(
    _platforms: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  getIssuer(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserProfileAndSocialLinks(
    _user: PromiseOrValue<string>,
    _platforms: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<[string, string, string, string[]]>;

  initialize(
    _initialIssuers: PromiseOrValue<string>[],
    _initialAllowedPlatforms: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowedSocialLink(
    _platform: PromiseOrValue<string>,
    _allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIssuer(
    _account: PromiseOrValue<string>,
    _switch: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _switch: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userProfiles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      name: string;
      profileImage: string;
      handle: string;
    }
  >;

  callStatic: {
    getAllowedSocialLinks(
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getIssuer(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserProfileAndSocialLinks(
      _user: PromiseOrValue<string>,
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string, string, string, string[]]>;

    initialize(
      _initialIssuers: PromiseOrValue<string>[],
      _initialAllowedPlatforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllowedSocialLink(
      _platform: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuer(
      _account: PromiseOrValue<string>,
      _switch: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(
      _switch: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userProfiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        name: string;
        profileImage: string;
        handle: string;
      }
    >;
  };

  filters: {
    "AllowedSocialLinkSet(string,bool)"(
      platform?: PromiseOrValue<string> | null,
      allowed?: null
    ): AllowedSocialLinkSetEventFilter;
    AllowedSocialLinkSet(
      platform?: PromiseOrValue<string> | null,
      allowed?: null
    ): AllowedSocialLinkSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IssuerSet(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isIssuer?: null
    ): IssuerSetEventFilter;
    IssuerSet(
      account?: PromiseOrValue<string> | null,
      isIssuer?: null
    ): IssuerSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SocialLinkSet(address,string,string)"(
      user?: PromiseOrValue<string> | null,
      platform?: null,
      link?: null
    ): SocialLinkSetEventFilter;
    SocialLinkSet(
      user?: PromiseOrValue<string> | null,
      platform?: null,
      link?: null
    ): SocialLinkSetEventFilter;

    "SocialLinksSet(address,string[],string[])"(
      user?: PromiseOrValue<string> | null,
      platforms?: null,
      links?: null
    ): SocialLinksSetEventFilter;
    SocialLinksSet(
      user?: PromiseOrValue<string> | null,
      platforms?: null,
      links?: null
    ): SocialLinksSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserHandleSet(address,string)"(
      user?: PromiseOrValue<string> | null,
      handle?: null
    ): UserHandleSetEventFilter;
    UserHandleSet(
      user?: PromiseOrValue<string> | null,
      handle?: null
    ): UserHandleSetEventFilter;

    "UserImageSet(address,string)"(
      user?: PromiseOrValue<string> | null,
      profileImage?: null
    ): UserImageSetEventFilter;
    UserImageSet(
      user?: PromiseOrValue<string> | null,
      profileImage?: null
    ): UserImageSetEventFilter;

    "UserNameSet(address,string)"(
      user?: PromiseOrValue<string> | null,
      name?: null
    ): UserNameSetEventFilter;
    UserNameSet(
      user?: PromiseOrValue<string> | null,
      name?: null
    ): UserNameSetEventFilter;
  };

  estimateGas: {
    getAllowedSocialLinks(
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuer(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserProfileAndSocialLinks(
      _user: PromiseOrValue<string>,
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _initialIssuers: PromiseOrValue<string>[],
      _initialAllowedPlatforms: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowedSocialLink(
      _platform: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIssuer(
      _account: PromiseOrValue<string>,
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userProfiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllowedSocialLinks(
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuer(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserProfileAndSocialLinks(
      _user: PromiseOrValue<string>,
      _platforms: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initialIssuers: PromiseOrValue<string>[],
      _initialAllowedPlatforms: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSocialLink(
      _platform: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIssuer(
      _account: PromiseOrValue<string>,
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _switch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userProfiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
