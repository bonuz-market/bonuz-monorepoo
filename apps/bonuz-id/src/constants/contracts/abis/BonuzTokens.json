{
  "address": "0x1f3988Bd7cB7Fe3A08b75543cc45744a8cA9B583",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__ExpiredTokenCannotBeRedeemed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__ExpiredTokenCannotBeTransferred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__InvalidTokenType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__NotAnAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__NotAnIssuer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__NotTokenIssuer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__RedeemedTokenCannotBeTransferred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__SoulBoundTokenCannotBeTransferred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BonuzTokens__TokenMustBeSoulBound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "AdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isIssuer",
          "type": "bool"
        }
      ],
      "name": "IssuerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "LoyaltyPointsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "LoyaltyPointsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "addLoyaltyPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tokenType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isSoulBound",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "redeemDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            }
          ],
          "internalType": "struct BonuzTokens.Metadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageURL",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isSoulBound",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_expiryDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "removeLoyaltyPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_switch",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x284e000bc55117b89a0795c7c867b4d7bc83accabc0d0fe4a6eb43a679706228",
  "receipt": {
    "to": null,
    "from": "0xF0A8391b201D66388D3389E2FF721f5e1c1E5709",
    "contractAddress": "0x1f3988Bd7cB7Fe3A08b75543cc45744a8cA9B583",
    "transactionIndex": 3,
    "gasUsed": "4243771",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000020000000000000002000000000000000000000000008000000000000002000000000000000000000000400000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200008000000000000000000000000000000000000000000000000000020004100000000000000000001000000000000000000000000000000120000000020000000000000000080000000000000000000000000000000000000000000100000",
    "blockHash": "0xe7bbec574aab418adfed3aeab3e2e0ba03228941e20d4a1f6a6c553981606797",
    "transactionHash": "0x284e000bc55117b89a0795c7c867b4d7bc83accabc0d0fe4a6eb43a679706228",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 42742887,
        "transactionHash": "0x284e000bc55117b89a0795c7c867b4d7bc83accabc0d0fe4a6eb43a679706228",
        "address": "0x1f3988Bd7cB7Fe3A08b75543cc45744a8cA9B583",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0a8391b201d66388d3389e2ff721f5e1c1e5709"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xe7bbec574aab418adfed3aeab3e2e0ba03228941e20d4a1f6a6c553981606797"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 42742887,
        "transactionHash": "0x284e000bc55117b89a0795c7c867b4d7bc83accabc0d0fe4a6eb43a679706228",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f0a8391b201d66388d3389e2ff721f5e1c1e5709",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001f1dd3b75365b7000000000000000000000000000000000000000000000000798f8370f10b47f40000000000000000000000000000000000000000000003cf0b591af74b2251f90000000000000000000000000000000000000000000000007970659d39b7e23d0000000000000000000000000000000000000000000003cf0b7838cb0275b7b0",
        "logIndex": 14,
        "blockHash": "0xe7bbec574aab418adfed3aeab3e2e0ba03228941e20d4a1f6a6c553981606797"
      }
    ],
    "blockNumber": 42742887,
    "cumulativeGasUsed": "5106736",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "90128362069c9b56988f3b318d0eb9c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BonuzTokens__ExpiredTokenCannotBeRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__ExpiredTokenCannotBeTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__NotAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__NotAnIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__NotTokenIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__RedeemedTokenCannotBeTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__SoulBoundTokenCannotBeTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BonuzTokens__TokenMustBeSoulBound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isIssuer\",\"type\":\"bool\"}],\"name\":\"IssuerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"LoyaltyPointsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"LoyaltyPointsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"addLoyaltyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSoulBound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"redeemDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"internalType\":\"struct BonuzTokens.Metadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageURL\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isSoulBound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"removeLoyaltyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"Locked(uint256)\":{\"details\":\"If a token is minted and the status is locked, this event should be emitted.\",\"params\":{\"tokenId\":\"The identifier for a token.\"}},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Unlocked(uint256)\":{\"details\":\"If a token is minted and the status is unlocked, this event should be emitted.\",\"params\":{\"tokenId\":\"The identifier for a token.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"locked(uint256)\":{\"details\":\"ERC-5192SBTs assigned to zero address are considered invalid, and queries about them do throw.\",\"params\":{\"tokenId\":\"The identifier for an SBT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"IERC165-supportsInterface\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Locked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to locked.\"},\"Unlocked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to unlocked.\"}},\"kind\":\"user\",\"methods\":{\"locked(uint256)\":{\"notice\":\"Returns the locking status of an Soulbound Token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BonuzTokens.sol\":\"BonuzTokens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/BonuzTokens.sol\":{\"content\":\"// solhint-disable reason-string\\n// solhint-disable not-rely-on-time\\n// solhint-disable quotes\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\n// Pragma statements\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// Error Codes\\nerror BonuzTokens__NotAnAdmin();\\nerror BonuzTokens__NotAnIssuer();\\nerror BonuzTokens__NotTokenIssuer();\\nerror BonuzTokens__SoulBoundTokenCannotBeTransferred();\\nerror BonuzTokens__ExpiredTokenCannotBeTransferred();\\nerror BonuzTokens__RedeemedTokenCannotBeTransferred();\\nerror BonuzTokens__ExpiredTokenCannotBeRedeemed();\\nerror BonuzTokens__InvalidTokenType();\\nerror BonuzTokens__TokenMustBeSoulBound();\\n\\n// Interfaces\\n\\n// Libraries\\n\\n// Contracts\\ncontract BonuzTokens is ERC721, Pausable, Ownable {\\n  using Strings for uint256;\\n\\n  // Type declarations\\n  struct Metadata {\\n    address issuer;\\n    string tokenType;\\n    string name;\\n    string desc;\\n    string imageURL;\\n    bool isSoulBound;\\n    uint256 redeemDate;\\n    uint256 expiryDate;\\n    uint256 points;\\n  }\\n\\n  // State variables\\n  mapping(uint256 => Metadata) private _token;\\n  mapping(address => bool) private _issuer;\\n  mapping(address => bool) private _admin;\\n\\n  uint256 private _tokenIdCounter = 1;\\n\\n  bytes32 private constant VOUCHER_HASH = keccak256(abi.encodePacked(\\\"VOUCHER\\\"));\\n  bytes32 private constant POP = keccak256(abi.encodePacked(\\\"POP\\\"));\\n  bytes32 private constant LOYALTY_HASH = keccak256(abi.encodePacked(\\\"LOYALTY\\\"));\\n  bytes32 private constant CERTIFICATE_HASH = keccak256(abi.encodePacked(\\\"CERTIFICATE\\\"));\\n  bytes32 private constant MEMBERSHIP_HASH = keccak256(abi.encodePacked(\\\"MEMBERSHIP\\\"));\\n\\n  // Events\\n  //----------------- EIP-721 Metadata Update Extension -----------------//\\n\\n  /// @dev This event emits when the metadata of a token is changed.\\n  /// So that the third-party platforms such as NFT market could\\n  /// timely update the images and related attributes of the NFT.\\n  event MetadataUpdate(uint256 _tokenId);\\n\\n  /// @dev This event emits when the metadata of a range of tokens is changed.\\n  /// So that the third-party platforms such as NFT market could\\n  /// timely update the images and related attributes of the NFTs.\\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n  //----------------- ERC-5192 SoulBound Token -----------------//\\n\\n  /// @notice Emitted when the locking status is changed to locked.\\n  /// @dev If a token is minted and the status is locked, this event should be emitted.\\n  /// @param tokenId The identifier for a token.\\n  event Locked(uint256 tokenId);\\n\\n  /// @notice Emitted when the locking status is changed to unlocked.\\n  /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n  /// @param tokenId The identifier for a token.\\n  event Unlocked(uint256 tokenId);\\n\\n  event TokenRedeemed(address indexed issuer, uint256 tokenId);\\n  event LoyaltyPointsAdded(address indexed issuer, uint256 tokenId, uint256 points);\\n  event LoyaltyPointsRemoved(address indexed issuer, uint256 tokenId, uint256 points);\\n  event IssuerSet(address indexed account, bool isIssuer);\\n  event AdminSet(address indexed account, bool isAdmin);\\n\\n  // Constructor\\n  constructor() ERC721(\\\"BonuzTokens\\\", \\\"BNZTN\\\") {\\n    _admin[_msgSender()] = true;\\n    _issuer[_msgSender()] = true;\\n  }\\n\\n  // Modifiers\\n  modifier onlyAdmin() {\\n    if (_admin[_msgSender()] == false) revert BonuzTokens__NotAnAdmin();\\n    _;\\n  }\\n\\n  modifier onlyIssuer() {\\n    if (_issuer[_msgSender()] == false) revert BonuzTokens__NotAnIssuer();\\n    _;\\n  }\\n\\n  // Functions Order\\n  // External functions\\n  function mint(\\n    address _account,  \\n    string memory _tokenType,\\n    string memory _name,\\n    string memory _desc,\\n    string memory _imageURL,\\n    bool _isSoulBound,\\n    uint256 _expiryDate,\\n    uint256 _points\\n    ) external onlyIssuer {\\n    bytes32 tokenTypeHash = keccak256(abi.encodePacked(_tokenType));\\n    if ((tokenTypeHash == POP || tokenTypeHash == CERTIFICATE_HASH) && !_isSoulBound) {\\n      revert BonuzTokens__TokenMustBeSoulBound();\\n    }\\n    if (_isSoulBound) {\\n      emit Locked(_tokenIdCounter);\\n    }\\n\\n     _token[_tokenIdCounter] = Metadata({\\n        issuer: _msgSender(),\\n        tokenType: _tokenType,\\n        name: _name,\\n        desc: _desc,\\n        imageURL: _imageURL,\\n        isSoulBound: _isSoulBound,\\n        redeemDate: 0,\\n        expiryDate: _expiryDate,\\n        points: _points\\n    });\\n\\n    _safeMint(_account, _tokenIdCounter);\\n    _tokenIdCounter++;\\n  }\\n\\n  function redeemVoucher(uint256 tokenId) external onlyIssuer {\\n    Metadata memory metadata = _token[tokenId];\\n    if (keccak256(abi.encodePacked(metadata.tokenType)) != VOUCHER_HASH)\\n      revert BonuzTokens__InvalidTokenType();\\n    if (metadata.issuer != _msgSender()) revert BonuzTokens__NotTokenIssuer();\\n    if (metadata.expiryDate <= block.timestamp) revert BonuzTokens__ExpiredTokenCannotBeRedeemed();\\n    _token[tokenId].redeemDate = block.timestamp;\\n    emit MetadataUpdate(tokenId);\\n    emit TokenRedeemed(_msgSender(), tokenId);\\n  }\\n\\n  function addLoyaltyPoints(uint256 tokenId, uint256 points) external onlyIssuer {\\n    Metadata memory metadata = _token[tokenId];\\n    if (keccak256(abi.encodePacked(metadata.tokenType)) != LOYALTY_HASH)\\n      revert BonuzTokens__InvalidTokenType();\\n    if (metadata.issuer != _msgSender()) revert BonuzTokens__NotTokenIssuer();\\n    if (metadata.expiryDate <= block.timestamp) revert BonuzTokens__ExpiredTokenCannotBeRedeemed();\\n    _token[tokenId].points += points;\\n    emit MetadataUpdate(tokenId);\\n    emit LoyaltyPointsAdded(_msgSender(), tokenId, points);\\n  }\\n\\n  function removeLoyaltyPoints(uint256 tokenId, uint256 points) external onlyIssuer {\\n    Metadata memory metadata = _token[tokenId];\\n    if (keccak256(abi.encodePacked(metadata.tokenType)) != LOYALTY_HASH)\\n      revert BonuzTokens__InvalidTokenType();\\n    if (metadata.issuer != _msgSender()) revert BonuzTokens__NotTokenIssuer();\\n    if (metadata.expiryDate <= block.timestamp) revert BonuzTokens__ExpiredTokenCannotBeRedeemed();\\n    if (metadata.points >= points) {\\n      _token[tokenId].points -= points;\\n    } else {\\n      _token[tokenId].points = 0;\\n    }\\n    emit MetadataUpdate(tokenId);\\n    emit LoyaltyPointsRemoved(_msgSender(), tokenId, points);\\n  }\\n\\n  function setIssuer(address _account, bool _state) external onlyAdmin {\\n    _issuer[_account] = _state;\\n    emit IssuerSet(_account, _state);\\n  }\\n\\n  function setAdmin(address _account, bool _state) external onlyOwner {\\n    _admin[_account] = _state;\\n    emit AdminSet(_account, _state);\\n  }\\n\\n  function setPause(bool _switch) external onlyOwner {\\n    if (_switch) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n\\n  /// @dev ERC-5192\\n  /// @notice Returns the locking status of an Soulbound Token\\n  /// @dev SBTs assigned to zero address are considered invalid, and queries\\n  /// about them do throw.\\n  /// @param tokenId The identifier for an SBT.\\n  function locked(uint256 tokenId) external view returns (bool) {\\n    return _token[tokenId].isSoulBound;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 batchSize\\n  ) internal override whenNotPaused {\\n    Metadata memory metadata = _token[tokenId];\\n    if (from != address(0)) {\\n      if (metadata.isSoulBound) {\\n        revert BonuzTokens__SoulBoundTokenCannotBeTransferred();\\n      }\\n      if (metadata.expiryDate != 0 && metadata.expiryDate <= block.timestamp) {\\n        revert BonuzTokens__ExpiredTokenCannotBeTransferred();\\n      }\\n      if (metadata.redeemDate != 0 && metadata.redeemDate <= block.timestamp) {\\n        revert BonuzTokens__RedeemedTokenCannotBeTransferred();\\n      }\\n    }\\n    super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n  }\\n\\n  /// @dev IERC165-supportsInterface\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    Metadata storage metadata = _token[tokenId];\\n\\n    string memory typeName = \\\"\\\";\\n    string memory specificName = \\\"\\\";\\n    string memory specificDesc = \\\"\\\";\\n    string[] memory attributes;\\n\\n    bytes32 typeHash = keccak256(abi.encodePacked(metadata.tokenType));\\n\\n    if (typeHash == VOUCHER_HASH) {\\n      typeName = \\\"VOUCHER\\\";\\n      specificName = metadata.name;\\n      specificDesc = metadata.desc;\\n      attributes = new string[](3);\\n      attributes[0] = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Type\\\", \\\"value\\\":\\\"', typeName, '\\\"}'));\\n      attributes[1] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Redeemed At\\\", \\\"value\\\":\\\"',\\n          metadata.redeemDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.redeemDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n      attributes[2] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Expiry Date\\\", \\\"value\\\":\\\"',\\n          metadata.expiryDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.expiryDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n    } else if (typeHash == POP) {\\n      typeName = \\\"POP\\\";\\n      specificName = metadata.name;\\n      specificDesc = metadata.desc;\\n      attributes = new string[](2);\\n      attributes[0] = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Type\\\", \\\"value\\\":\\\"', typeName, '\\\"}'));\\n      attributes[1] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Redeemed At\\\", \\\"value\\\":\\\"',\\n          metadata.redeemDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.redeemDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n    } else if (typeHash == CERTIFICATE_HASH) {\\n      typeName = \\\"CERTIFICATE\\\";\\n      specificName = metadata.name;\\n      specificDesc = metadata.desc;\\n      attributes = new string[](2);\\n      attributes[0] = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Type\\\", \\\"value\\\":\\\"', typeName, '\\\"}'));\\n      attributes[1] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Course Completed At\\\", \\\"value\\\":\\\"',\\n          metadata.redeemDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.redeemDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n    } else if (typeHash == LOYALTY_HASH) {\\n      typeName = \\\"LOYALTY\\\";\\n      specificName = metadata.name;\\n      specificDesc = metadata.desc;\\n      attributes = new string[](4);\\n      attributes[0] = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Type\\\", \\\"value\\\":\\\"', typeName, '\\\"}'));\\n      attributes[1] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Last Redeemed At\\\", \\\"value\\\":\\\"',\\n          metadata.redeemDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.redeemDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n      attributes[2] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Expiry Date\\\", \\\"value\\\":\\\"',\\n          metadata.expiryDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.expiryDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n      attributes[3] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Points Available\\\", \\\"value\\\":\\\"',\\n          metadata.points.toString(),\\n          '\\\"}'\\n        )\\n      );\\n    } else if (typeHash == MEMBERSHIP_HASH) {\\n      typeName = \\\"MEMBERSHIP\\\";\\n      specificName = metadata.name;\\n      specificDesc = metadata.desc;\\n      attributes = new string[](3);\\n      attributes[0] = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Type\\\", \\\"value\\\":\\\"', typeName, '\\\"}'));\\n      attributes[1] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"is transferable\\\", \\\"value\\\":\\\"',\\n          metadata.isSoulBound ? \\\"No\\\" : \\\"Yes\\\",\\n          '\\\"}'\\n        )\\n      );\\n      attributes[2] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"Redeemed At\\\", \\\"value\\\":\\\"',\\n          metadata.redeemDate.toString(),\\n          '\\\",\\\"display_type\\\":\\\"',\\n          metadata.redeemDate == 0 ? \\\"text\\\" : \\\"date\\\",\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    string memory attributesJson = joinStrings(\\\", \\\", attributes);\\n    string memory nftName = string(\\n      abi.encodePacked(typeName, \\\" #\\\", Strings.toString(tokenId), \\\" (\\\", specificName, \\\")\\\")\\n    );\\n    string memory description = string(abi.encodePacked(metadata.desc, \\\" (\\\", specificDesc, \\\")\\\"));\\n\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"',\\n            nftName,\\n            '\\\", \\\"description\\\": \\\"',\\n            description,\\n            '\\\", \\\"image\\\": \\\"',\\n            metadata.imageURL,\\n            '\\\", \\\"attributes\\\": [',\\n            attributesJson,\\n            \\\"]}\\\"\\n          )\\n        )\\n      )\\n    );\\n\\n    string memory _dataUri = \\\"data:application/json;base64,\\\";\\n\\n    return string(abi.encodePacked(_dataUri, json));\\n  }\\n\\n  function joinStrings(\\n    string memory separator,\\n    string[] memory data\\n  ) internal pure returns (string memory) {\\n    string memory _tmpValue = data[0];\\n    for (uint i = 1; i < data.length; i++) {\\n      _tmpValue = string(abi.encodePacked(_tmpValue, separator, data[i]));\\n    }\\n    return _tmpValue;\\n  }\\n\\n  function getTokenMetadata(uint256 _tokenId) public view returns (Metadata memory) {\\n    return _token[_tokenId];\\n  }\\n\\n  function getTokenCounter() public view returns (uint256) {\\n    return _tokenIdCounter;\\n  }\\n\\n  function isAdmin(address _account) public view returns (bool) {\\n    return _admin[_account];\\n  }\\n\\n  function isIssuer(address _account) public view returns (bool) {\\n    return _issuer[_account];\\n  }\\n}\\n\",\"keccak256\":\"0x78fc9bcff991be9c01126d8aeb818a105e1884dc0b14b75a7be69207a6abf024\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015f5760003560e01c806301ffc9a71461016457806306fdde031461018c578063081812fc146101a1578063095ea7b3146101c15780631c6d6b5e146101d657806323b872dd146101e957806324d7806c146101fc57806342842e0e14610228578063495289be1461023b5780634b0bddd21461024e5780635c975abb14610261578063603168011461026c5780636352211e1461028c5780636739cf371461029f5780636e02007d146102b257806370a08231146102c4578063715018a6146102d7578063877b9a67146102df5780638da5cb5b1461030b57806395d89b4114610313578063a22cb4651461031b578063b45a3c0e1461032e578063b88d4fde14610354578063bedb86fb14610367578063c87b56dd1461037a578063cacbc5c01461038d578063e985e9c5146103a0578063eeb3e62b146103b3578063f2fde38b146103c6575b600080fd5b610177610172366004613a22565b6103d9565b60405190151581526020015b60405180910390f35b610194610404565b6040516101839190613a96565b6101b46101af366004613aa9565b610496565b6040516101839190613ac2565b6101d46101cf366004613af2565b6104bd565b005b6101d46101e4366004613aa9565b6105d7565b6101d46101f7366004613b1c565b6109f0565b61017761020a366004613b58565b6001600160a01b031660009081526009602052604090205460ff1690565b6101d4610236366004613b1c565b610a21565b6101d4610249366004613b83565b610a3c565b6101d461025c366004613b83565b610ac8565b60065460ff16610177565b61027f61027a366004613aa9565b610b28565b6040516101839190613bb6565b6101b461029a366004613aa9565b610e2b565b6101d46102ad366004613c8a565b610e5f565b600a545b604051908152602001610183565b6102b66102d2366004613b58565b611289565b6101d461130f565b6101776102ed366004613b58565b6001600160a01b031660009081526008602052604090205460ff1690565b6101b4611323565b610194611337565b6101d4610329366004613b83565b611346565b61017761033c366004613aa9565b60009081526007602052604090206005015460ff1690565b6101d4610362366004613d37565b611355565b6101d4610375366004613db2565b61138d565b610194610388366004613aa9565b6113ae565b6101d461039b366004613c8a565b612378565b6101776103ae366004613dcd565b6127be565b6101d46103c1366004613e17565b6127ec565b6101d46103d4366004613b58565b612a45565b60006001600160e01b03198216632483248360e11b14806103fe57506103fe82612abb565b92915050565b60606000805461041390613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90613ef8565b801561048c5780601f106104615761010080835404028352916020019161048c565b820191906000526020600020905b81548152906001019060200180831161046f57829003601f168201915b5050505050905090565b60006104a182612b0b565b506000908152600460205260409020546001600160a01b031690565b60006104c882610e2b565b9050806001600160a01b0316836001600160a01b03160361053a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610556575061055681336127be565b6105c85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610531565b6105d28383612b30565b505050565b3360009081526008602052604081205460ff161515900361060b57604051632b8a20d760e01b815260040160405180910390fd5b60008181526007602090815260408083208151610120810190925280546001600160a01b03168252600181018054929391929184019161064a90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461067690613ef8565b80156106c35780601f10610698576101008083540402835291602001916106c3565b820191906000526020600020905b8154815290600101906020018083116106a657829003601f168201915b505050505081526020016002820180546106dc90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461070890613ef8565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b5050505050815260200160038201805461076e90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461079a90613ef8565b80156107e75780601f106107bc576101008083540402835291602001916107e7565b820191906000526020600020905b8154815290600101906020018083116107ca57829003601f168201915b5050505050815260200160048201805461080090613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461082c90613ef8565b80156108795780601f1061084e57610100808354040283529160200191610879565b820191906000526020600020905b81548152906001019060200180831161085c57829003601f168201915b505050505081526020016005820160009054906101000a900460ff16151515158152602001600682015481526020016007820154815260200160088201548152505090506040516020016108cc90613f32565b6040516020818303038152906040528051906020012081602001516040516020016108f79190613f45565b604051602081830303815290604052805190602001201461092b5760405163f1ac8f7360e01b815260040160405180910390fd5b80516001600160a01b031633146109555760405163e07147c560e01b815260040160405180910390fd5b428160e001511161097957604051631a074ccb60e01b815260040160405180910390fd5b6000828152600760205260409081902042600690910155516000805160206148c9833981519152906109ae9084815260200190565b60405180910390a160405182815233907fce4385affa8ad2cbec45b1660c6f6afcb691bf0a7a73ebda096ee1dfb670fe6f906020015b60405180910390a25050565b6109fa3382612b9e565b610a165760405162461bcd60e51b815260040161053190613f61565b6105d2838383612bfd565b6105d283838360405180602001604052806000815250611355565b3360009081526009602052604081205460ff1615159003610a70576040516351a17ce760e01b815260040160405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fc6aeabbc4fc4eb208b2b4cec7249245167cb6191c47e2e6f82a3cd59a89ce7e191016109e4565b610ad0612d6e565b6001600160a01b038216600081815260096020908152604091829020805460ff191685151590811790915591519182527fe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e991016109e4565b610b8260405180610120016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016000151581526020016000815260200160008152602001600081525090565b6000828152600760209081526040918290208251610120810190935280546001600160a01b031683526001810180549192840191610bbf90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610beb90613ef8565b8015610c385780601f10610c0d57610100808354040283529160200191610c38565b820191906000526020600020905b815481529060010190602001808311610c1b57829003601f168201915b50505050508152602001600282018054610c5190613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7d90613ef8565b8015610cca5780601f10610c9f57610100808354040283529160200191610cca565b820191906000526020600020905b815481529060010190602001808311610cad57829003601f168201915b50505050508152602001600382018054610ce390613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0f90613ef8565b8015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b50505050508152602001600482018054610d7590613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610da190613ef8565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b5050509183525050600582015460ff1615156020820152600682015460408201526007820154606082015260089091015460809091015292915050565b600080610e3783612dcd565b90506001600160a01b0381166103fe5760405162461bcd60e51b815260040161053190613fae565b3360009081526008602052604081205460ff1615159003610e9357604051632b8a20d760e01b815260040160405180910390fd5b60008281526007602090815260408083208151610120810190925280546001600160a01b031682526001810180549293919291840191610ed290613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610efe90613ef8565b8015610f4b5780601f10610f2057610100808354040283529160200191610f4b565b820191906000526020600020905b815481529060010190602001808311610f2e57829003601f168201915b50505050508152602001600282018054610f6490613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9090613ef8565b8015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b820191906000526020600020905b815481529060010190602001808311610fc057829003601f168201915b50505050508152602001600382018054610ff690613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461102290613ef8565b801561106f5780601f106110445761010080835404028352916020019161106f565b820191906000526020600020905b81548152906001019060200180831161105257829003601f168201915b5050505050815260200160048201805461108890613ef8565b80601f01602080910402602001604051908101604052809291908181526020018280546110b490613ef8565b80156111015780601f106110d657610100808354040283529160200191611101565b820191906000526020600020905b8154815290600101906020018083116110e457829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815260200160078201548152602001600882015481525050905060405160200161115490613fe0565b60405160208183030381529060405280519060200120816020015160405160200161117f9190613f45565b60405160208183030381529060405280519060200120146111b35760405163f1ac8f7360e01b815260040160405180910390fd5b80516001600160a01b031633146111dd5760405163e07147c560e01b815260040160405180910390fd5b428160e001511161120157604051631a074ccb60e01b815260040160405180910390fd5b60008381526007602052604081206008018054849290611222908490614009565b90915550506040518381526000805160206148c98339815191529060200160405180910390a1604080518481526020810184905233917f503b67ab8ec954983ee95e5887ca4389a70175156de37975a60c7c0c4037016391015b60405180910390a2505050565b60006001600160a01b0382166112f35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610531565b506001600160a01b031660009081526003602052604090205490565b611317612d6e565b6113216000612de8565b565b60065461010090046001600160a01b031690565b60606001805461041390613ef8565b611351338383612e42565b5050565b61135f3383612b9e565b61137b5760405162461bcd60e51b815260040161053190613f61565b61138784848484612f0c565b50505050565b611395612d6e565b80156113a6576113a3612f3f565b50565b6113a3612f93565b6000818152600760209081526040808320815180840183528481528251808501845285815283518086018552868152935160609693959294919391928792916113fc9160018901910161408f565b60405160208183030381529060405280519060200120905060405160200161142390613f32565b60405160208183030381529060405280519060200120810361172c57604051806040016040528060078152602001662b27aaa1a422a960c91b815250945085600201805461147090613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461149c90613ef8565b80156114e95780601f106114be576101008083540402835291602001916114e9565b820191906000526020600020905b8154815290600101906020018083116114cc57829003601f168201915b505050505093508560030180546114ff90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461152b90613ef8565b80156115785780601f1061154d57610100808354040283529160200191611578565b820191906000526020600020905b81548152906001019060200180831161155b57829003601f168201915b509396506003935061158992505050565b6040519080825280602002602001820160405280156115bc57816020015b60608152602001906001900390816115a75790505b509150846040516020016115d0919061409b565b604051602081830303815290604052826000815181106115f2576115f26140ec565b602002602001018190525061160a8660060154612fcc565b60068701541561163657604051806040016040528060048152602001636461746560e01b815250611654565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001611665929190614102565b60405160208183030381529060405282600181518110611687576116876140ec565b602002602001018190525061169f8660070154612fcc565b6007870154156116cb57604051806040016040528060048152602001636461746560e01b8152506116e9565b604051806040016040528060048152602001631d195e1d60e21b8152505b6040516020016116fa929190614196565b6040516020818303038152906040528260028151811061171c5761171c6140ec565b6020026020010181905250612254565b60405160200161173b906141dd565b60405160208183030381529060405280519060200120810361199b57604051806040016040528060038152602001620504f560ec1b815250945085600201805461178490613ef8565b80601f01602080910402602001604051908101604052809291908181526020018280546117b090613ef8565b80156117fd5780601f106117d2576101008083540402835291602001916117fd565b820191906000526020600020905b8154815290600101906020018083116117e057829003601f168201915b5050505050935085600301805461181390613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461183f90613ef8565b801561188c5780601f106118615761010080835404028352916020019161188c565b820191906000526020600020905b81548152906001019060200180831161186f57829003601f168201915b509396506002935061189d92505050565b6040519080825280602002602001820160405280156118d057816020015b60608152602001906001900390816118bb5790505b509150846040516020016118e4919061409b565b60405160208183030381529060405282600081518110611906576119066140ec565b602002602001018190525061191e8660060154612fcc565b60068701541561194a57604051806040016040528060048152602001636461746560e01b815250611968565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001611979929190614102565b6040516020818303038152906040528260018151811061171c5761171c6140ec565b6040516020016119aa906141ec565b604051602081830303815290604052805190602001208103611bf0576040518060400160405280600b81526020016a434552544946494341544560a81b81525094508560020180546119fb90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2790613ef8565b8015611a745780601f10611a4957610100808354040283529160200191611a74565b820191906000526020600020905b815481529060010190602001808311611a5757829003601f168201915b50505050509350856003018054611a8a90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab690613ef8565b8015611b035780601f10611ad857610100808354040283529160200191611b03565b820191906000526020600020905b815481529060010190602001808311611ae657829003601f168201915b5093965060029350611b1492505050565b604051908082528060200260200182016040528015611b4757816020015b6060815260200190600190039081611b325790505b50915084604051602001611b5b919061409b565b60405160208183030381529060405282600081518110611b7d57611b7d6140ec565b6020026020010181905250611b958660060154612fcc565b600687015415611bc157604051806040016040528060048152602001636461746560e01b815250611bdf565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001611979929190614203565b604051602001611bff90613fe0565b604051602081830303815290604052805190602001208103611f4257604051806040016040528060078152602001664c4f59414c545960c81b8152509450856002018054611c4c90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7890613ef8565b8015611cc55780601f10611c9a57610100808354040283529160200191611cc5565b820191906000526020600020905b815481529060010190602001808311611ca857829003601f168201915b50505050509350856003018054611cdb90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0790613ef8565b8015611d545780601f10611d2957610100808354040283529160200191611d54565b820191906000526020600020905b815481529060010190602001808311611d3757829003601f168201915b5093965060049350611d6592505050565b604051908082528060200260200182016040528015611d9857816020015b6060815260200190600190039081611d835790505b50915084604051602001611dac919061409b565b60405160208183030381529060405282600081518110611dce57611dce6140ec565b6020026020010181905250611de68660060154612fcc565b600687015415611e1257604051806040016040528060048152602001636461746560e01b815250611e30565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001611e4192919061429f565b60405160208183030381529060405282600181518110611e6357611e636140ec565b6020026020010181905250611e7b8660070154612fcc565b600787015415611ea757604051806040016040528060048152602001636461746560e01b815250611ec5565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001611ed6929190614196565b60405160208183030381529060405282600281518110611ef857611ef86140ec565b6020026020010181905250611f108660080154612fcc565b604051602001611f209190614338565b6040516020818303038152906040528260038151811061171c5761171c6140ec565b6040516904d454d424552534849560b41b6020820152602a01604051602081830303815290604052805190602001208103612254576040518060400160405280600a81526020016904d454d424552534849560b41b8152509450856002018054611fab90613ef8565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd790613ef8565b80156120245780601f10611ff957610100808354040283529160200191612024565b820191906000526020600020905b81548152906001019060200180831161200757829003601f168201915b5050505050935085600301805461203a90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461206690613ef8565b80156120b35780601f10612088576101008083540402835291602001916120b3565b820191906000526020600020905b81548152906001019060200180831161209657829003601f168201915b50939650600393506120c492505050565b6040519080825280602002602001820160405280156120f757816020015b60608152602001906001900390816120e25790505b5091508460405160200161210b919061409b565b6040516020818303038152906040528260008151811061212d5761212d6140ec565b6020908102919091010152600586015460ff16612165576040518060400160405280600381526020016259657360e81b815250612181565b604051806040016040528060028152602001614e6f60f01b8152505b604051602001612191919061439d565b604051602081830303815290604052826001815181106121b3576121b36140ec565b60200260200101819052506121cb8660060154612fcc565b6006870154156121f757604051806040016040528060048152602001636461746560e01b815250612215565b604051806040016040528060048152602001631d195e1d60e21b8152505b604051602001612226929190614102565b60405160208183030381529060405282600281518110612248576122486140ec565b60200260200101819052505b600061227a60405180604001604052806002815260200161016160f51b8152508461305e565b90506000866122888b612fcc565b8760405160200161229b93929190614401565b6040516020818303038152906040529050600088600301866040516020016122c4929190614470565b6040516020818303038152906040529050600061230883838c600401876040516020016122f494939291906144b1565b6040516020818303038152906040526130e9565b905060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152509050808260405160200161235792919061457d565b6040516020818303038152906040529b505050505050505050505050919050565b3360009081526008602052604081205460ff16151590036123ac57604051632b8a20d760e01b815260040160405180910390fd5b60008281526007602090815260408083208151610120810190925280546001600160a01b0316825260018101805492939192918401916123eb90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461241790613ef8565b80156124645780601f1061243957610100808354040283529160200191612464565b820191906000526020600020905b81548152906001019060200180831161244757829003601f168201915b5050505050815260200160028201805461247d90613ef8565b80601f01602080910402602001604051908101604052809291908181526020018280546124a990613ef8565b80156124f65780601f106124cb576101008083540402835291602001916124f6565b820191906000526020600020905b8154815290600101906020018083116124d957829003601f168201915b5050505050815260200160038201805461250f90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461253b90613ef8565b80156125885780601f1061255d57610100808354040283529160200191612588565b820191906000526020600020905b81548152906001019060200180831161256b57829003601f168201915b505050505081526020016004820180546125a190613ef8565b80601f01602080910402602001604051908101604052809291908181526020018280546125cd90613ef8565b801561261a5780601f106125ef5761010080835404028352916020019161261a565b820191906000526020600020905b8154815290600101906020018083116125fd57829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815260200160078201548152602001600882015481525050905060405160200161266d90613fe0565b6040516020818303038152906040528051906020012081602001516040516020016126989190613f45565b60405160208183030381529060405280519060200120146126cc5760405163f1ac8f7360e01b815260040160405180910390fd5b80516001600160a01b031633146126f65760405163e07147c560e01b815260040160405180910390fd5b428160e001511161271a57604051631a074ccb60e01b815260040160405180910390fd5b818161010001511061275257600083815260076020526040812060080180548492906127479084906145ac565b909155506127659050565b6000838152600760205260408120600801555b6040518381526000805160206148c98339815191529060200160405180910390a1604080518481526020810184905233917fcc809b74da26c69bfd3eb42a37858bc0777799a5c7645cc728b0d25785e717fc910161127c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3360009081526008602052604081205460ff161515900361282057604051632b8a20d760e01b815260040160405180910390fd5b6000876040516020016128339190613f45565b60405160208183030381529060405280519060200120905060405160200161285a906141dd565b604051602081830303815290604052805190602001208114806128a05750604051602001612887906141ec565b6040516020818303038152906040528051906020012081145b80156128aa575083155b156128c8576040516323ae815560e21b815260040160405180910390fd5b831561290a577f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611600a5460405161290191815260200190565b60405180910390a15b60405180610120016040528061291d3390565b6001600160a01b03908116825260208083018c905260408084018c9052606084018b9052608084018a905288151560a0850152600060c0850181905260e08501899052610100909401879052600a54845260078252909220835181546001600160a01b031916921691909117815590820151600182019061299e908261460d565b50604082015160028201906129b3908261460d565b50606082015160038201906129c8908261460d565b50608082015160048201906129dd908261460d565b5060a082015160058201805460ff191691151591909117905560c0820151600682015560e0820151600782015561010090910151600890910155600a54612a25908a9061323b565b600a8054906000612a35836146cc565b9190505550505050505050505050565b612a4d612d6e565b6001600160a01b038116612ab25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610531565b6113a381612de8565b60006001600160e01b031982166380ac58cd60e01b1480612aec57506001600160e01b03198216635b5e139f60e01b145b806103fe57506301ffc9a760e01b6001600160e01b03198316146103fe565b612b1481613255565b6113a35760405162461bcd60e51b815260040161053190613fae565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b6582610e2b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612baa83610e2b565b9050806001600160a01b0316846001600160a01b03161480612bd15750612bd181856127be565b80612bf55750836001600160a01b0316612bea84610496565b6001600160a01b0316145b949350505050565b826001600160a01b0316612c1082610e2b565b6001600160a01b031614612c365760405162461bcd60e51b8152600401610531906146e5565b6001600160a01b038216612c985760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610531565b612ca58383836001613272565b826001600160a01b0316612cb882610e2b565b6001600160a01b031614612cde5760405162461bcd60e51b8152600401610531906146e5565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b33612d77611323565b6001600160a01b0316146113215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610531565b6000908152600260205260409020546001600160a01b031690565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603612e9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610531565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612f17848484612bfd565b612f23848484846135d0565b6113875760405162461bcd60e51b81526004016105319061472a565b612f476136d1565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f7c3390565b604051612f899190613ac2565b60405180910390a1565b612f9b613717565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612f7c565b60606000612fd983613760565b60010190506000816001600160401b03811115612ff857612ff8613cac565b6040519080825280601f01601f191660200182016040528015613022576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461302c57509392505050565b6060600082600081518110613075576130756140ec565b602002602001015190506000600190505b83518110156130e15781858583815181106130a3576130a36140ec565b60200260200101516040516020016130bd9392919061477c565b604051602081830303815290604052915080806130d9906146cc565b915050613086565b509392505050565b6060815160000361310857505060408051602081019091526000815290565b600060405180606001604052806040815260200161488960409139905060006003845160026131379190614009565b61314191906147bf565b61314c9060046147e1565b6001600160401b0381111561316357613163613cac565b6040519080825280601f01601f19166020018201604052801561318d576020820181803683370190505b509050600182016020820185865187015b808210156131f9576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061319e565b5050600386510660018114613215576002811461322857613230565b603d6001830353603d6002830353613230565b603d60018303535b509195945050505050565b611351828260405180602001604052806000815250613836565b60008061326183612dcd565b6001600160a01b0316141592915050565b61327a6136d1565b60008281526007602090815260408083208151610120810190925280546001600160a01b0316825260018101805492939192918401916132b990613ef8565b80601f01602080910402602001604051908101604052809291908181526020018280546132e590613ef8565b80156133325780601f1061330757610100808354040283529160200191613332565b820191906000526020600020905b81548152906001019060200180831161331557829003601f168201915b5050505050815260200160028201805461334b90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461337790613ef8565b80156133c45780601f10613399576101008083540402835291602001916133c4565b820191906000526020600020905b8154815290600101906020018083116133a757829003601f168201915b505050505081526020016003820180546133dd90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461340990613ef8565b80156134565780601f1061342b57610100808354040283529160200191613456565b820191906000526020600020905b81548152906001019060200180831161343957829003601f168201915b5050505050815260200160048201805461346f90613ef8565b80601f016020809104026020016040519081016040528092919081815260200182805461349b90613ef8565b80156134e85780601f106134bd576101008083540402835291602001916134e8565b820191906000526020600020905b8154815290600101906020018083116134cb57829003601f168201915b5050509183525050600582015460ff1615156020820152600682015460408201526007820154606082015260089091015460809091015290506001600160a01b038516156135bd578060a0015115613553576040516341c323cf60e01b815260040160405180910390fd5b60e08101511580159061356a5750428160e0015111155b156135885760405163891d51fb60e01b815260040160405180910390fd5b60c08101511580159061359f5750428160c0015111155b156135bd576040516396ddb2af60e01b815260040160405180910390fd5b6135c985858585613869565b5050505050565b60006001600160a01b0384163b156136c657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906136149033908990889088906004016147f8565b6020604051808303816000875af192505050801561364f575060408051601f3d908101601f1916820190925261364c91810190614835565b60015b6136ac573d80801561367d576040519150601f19603f3d011682016040523d82523d6000602084013e613682565b606091505b5080516000036136a45760405162461bcd60e51b81526004016105319061472a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612bf5565b506001949350505050565b60065460ff16156113215760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610531565b60065460ff166113215760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610531565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061379f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b83106137c9576904ee2d6d415b85acef8160201b830492506020015b662386f26fc1000083106137e757662386f26fc10000830492506010015b6305f5e10083106137ff576305f5e100830492506008015b612710831061381357612710830492506004015b60648310613825576064830492506002015b600a83106103fe5760010192915050565b61384083836138f1565b61384d60008484846135d0565b6105d25760405162461bcd60e51b81526004016105319061472a565b6001811115611387576001600160a01b038416156138af576001600160a01b038416600090815260036020526040812080548392906138a99084906145ac565b90915550505b6001600160a01b03831615611387576001600160a01b038316600090815260036020526040812080548392906138e6908490614009565b909155505050505050565b6001600160a01b0382166139475760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610531565b61395081613255565b1561396d5760405162461bcd60e51b815260040161053190614852565b61397b600083836001613272565b61398481613255565b156139a15760405162461bcd60e51b815260040161053190614852565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146113a357600080fd5b600060208284031215613a3457600080fd5b8135613a3f81613a0c565b9392505050565b60005b83811015613a61578181015183820152602001613a49565b50506000910152565b60008151808452613a82816020860160208601613a46565b601f01601f19169290920160200192915050565b602081526000613a3f6020830184613a6a565b600060208284031215613abb57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b0381168114613aed57600080fd5b919050565b60008060408385031215613b0557600080fd5b613b0e83613ad6565b946020939093013593505050565b600080600060608486031215613b3157600080fd5b613b3a84613ad6565b9250613b4860208501613ad6565b9150604084013590509250925092565b600060208284031215613b6a57600080fd5b613a3f82613ad6565b80358015158114613aed57600080fd5b60008060408385031215613b9657600080fd5b613b9f83613ad6565b9150613bad60208401613b73565b90509250929050565b60208152613bd06020820183516001600160a01b03169052565b60006020830151610120806040850152613bee610140850183613a6a565b91506040850151601f1980868503016060870152613c0c8483613a6a565b93506060870151915080868503016080870152613c298483613a6a565b935060808701519150808685030160a087015250613c478382613a6a565b92505060a0850151613c5d60c086018215159052565b5060c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b60008060408385031215613c9d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613cdc57613cdc613cac565b604051601f8501601f19908116603f01168101908282118183101715613d0457613d04613cac565b81604052809350858152868686011115613d1d57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613d4d57600080fd5b613d5685613ad6565b9350613d6460208601613ad6565b92506040850135915060608501356001600160401b03811115613d8657600080fd5b8501601f81018713613d9757600080fd5b613da687823560208401613cc2565b91505092959194509250565b600060208284031215613dc457600080fd5b613a3f82613b73565b60008060408385031215613de057600080fd5b613de983613ad6565b9150613bad60208401613ad6565b600082601f830112613e0857600080fd5b613a3f83833560208501613cc2565b600080600080600080600080610100898b031215613e3457600080fd5b613e3d89613ad6565b975060208901356001600160401b0380821115613e5957600080fd5b613e658c838d01613df7565b985060408b0135915080821115613e7b57600080fd5b613e878c838d01613df7565b975060608b0135915080821115613e9d57600080fd5b613ea98c838d01613df7565b965060808b0135915080821115613ebf57600080fd5b50613ecc8b828c01613df7565b945050613edb60a08a01613b73565b925060c0890135915060e089013590509295985092959890939650565b600181811c90821680613f0c57607f821691505b602082108103613f2c57634e487b7160e01b600052602260045260246000fd5b50919050565b662b27aaa1a422a960c91b815260070190565b60008251613f57818460208701613a46565b9190910192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b664c4f59414c545960c81b815260070190565b634e487b7160e01b600052601160045260246000fd5b808201808211156103fe576103fe613ff3565b6000815461402981613ef8565b60018281168015614041576001811461405657614085565b60ff1984168752821515830287019450614085565b8560005260208060002060005b8581101561407c5781548a820152908401908201614063565b50505082870194505b5050505092915050565b6000613a3f828461401c565b7f7b2274726169745f74797065223a2254797065222c202276616c7565223a22008152600082516140d381601f850160208701613a46565b61227d60f01b601f939091019283015250602101919050565b634e487b7160e01b600052603260045260246000fd5b7f7b2274726169745f74797065223a2252656465656d6564204174222c20227661815265363ab2911d1160d11b602082015260008351614149816026850160208801613a46565b711116113234b9b83630bcafba3cb832911d1160711b602691840191820152835161417b816038840160208801613a46565b61227d60f01b60389290910191820152603a01949350505050565b7f7b2274726169745f74797065223a224578706972792044617465222c20227661815265363ab2911d1160d11b602082015260008351614149816026850160208801613a46565b620504f560ec1b815260030190565b6a434552544946494341544560a81b8152600b0190565b7f7b2274726169745f74797065223a22436f7572736520436f6d706c657465642081526d20ba111610113b30b63ab2911d1160911b60208201526000835161425281602e850160208801613a46565b711116113234b9b83630bcafba3cb832911d1160711b602e918401918201528351614284816040840160208801613a46565b61227d60f01b60409290910191820152604201949350505050565b7f7b2274726169745f74797065223a224c6173742052656465656d65642041742281526a1610113b30b63ab2911d1160a91b6020820152600083516142eb81602b850160208801613a46565b711116113234b9b83630bcafba3cb832911d1160711b602b91840191820152835161431d81603d840160208801613a46565b61227d60f01b603d9290910191820152603f01949350505050565b7f7b2274726169745f74797065223a22506f696e747320417661696c61626c652281526a1610113b30b63ab2911d1160a91b60208201526000825161438481602b850160208701613a46565b61227d60f01b602b939091019283015250602d01919050565b7f7b2274726169745f74797065223a226973207472616e7366657261626c65222c81526910113b30b63ab2911d1160b11b6020820152600082516143e881602a850160208701613a46565b61227d60f01b602a939091019283015250602c01919050565b60008451614413818460208901613a46565b61202360f01b9083019081528451614432816002840160208901613a46565b61040560f31b600292909101918201528351614455816004840160208801613a46565b602960f81b6004929091019182015260050195945050505050565b600061447c828561401c565b61040560f31b81528351614497816002840160208801613a46565b602960f81b60029290910191820152600301949350505050565b693d913730b6b2911d101160b11b815284516000906144d781600a850160208a01613a46565b72111610113232b9b1b934b83a34b7b7111d101160691b600a91840191820152855161450a81601d840160208a01613a46565b6c1116101134b6b0b3b2911d101160991b601d9290910191820152614532602a82018661401c565b71222c202261747472696275746573223a205b60701b81528451909150614560816012840160208801613a46565b615d7d60f01b601292909101918201526014019695505050505050565b6000835161458f818460208801613a46565b8351908301906145a3818360208801613a46565b01949350505050565b818103818111156103fe576103fe613ff3565b601f8211156105d257600081815260208120601f850160051c810160208610156145e65750805b601f850160051c820191505b81811015614605578281556001016145f2565b505050505050565b81516001600160401b0381111561462657614626613cac565b61463a816146348454613ef8565b846145bf565b602080601f83116001811461466f57600084156146575750858301515b600019600386901b1c1916600185901b178555614605565b600085815260208120601f198616915b8281101561469e5788860151825594840194600190910190840161467f565b50858210156146bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016146de576146de613ff3565b5060010190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000845161478e818460208901613a46565b8451908301906147a2818360208901613a46565b84519101906147b5818360208801613a46565b0195945050505050565b6000826147dc57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103fe576103fe613ff3565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061482b90830184613a6a565b9695505050505050565b60006020828403121561484757600080fd5b8151613a3f81613a0c565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60408201526060019056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7a2646970667358221220ce2ea55ab2f5ee5905c43b61613a82db551c0e7686a797fb977ce5c54a36239a64736f6c63430008110033",
  "devdoc": {
    "events": {
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "Locked(uint256)": {
        "details": "If a token is minted and the status is locked, this event should be emitted.",
        "params": {
          "tokenId": "The identifier for a token."
        }
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Unlocked(uint256)": {
        "details": "If a token is minted and the status is unlocked, this event should be emitted.",
        "params": {
          "tokenId": "The identifier for a token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "locked(uint256)": {
        "details": "ERC-5192SBTs assigned to zero address are considered invalid, and queries about them do throw.",
        "params": {
          "tokenId": "The identifier for an SBT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "IERC165-supportsInterface"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(uint256)": {
        "notice": "Emitted when the locking status is changed to locked."
      },
      "Unlocked(uint256)": {
        "notice": "Emitted when the locking status is changed to unlocked."
      }
    },
    "kind": "user",
    "methods": {
      "locked(uint256)": {
        "notice": "Returns the locking status of an Soulbound Token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1049,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1051,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1055,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1059,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1063,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1069,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 933,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 807,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_owner",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4227,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_token",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Metadata)4222_storage)"
      },
      {
        "astId": 4231,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_issuer",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4235,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_admin",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4238,
        "contract": "contracts/BonuzTokens.sol:BonuzTokens",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Metadata)4222_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BonuzTokens.Metadata)",
        "numberOfBytes": "32",
        "value": "t_struct(Metadata)4222_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Metadata)4222_storage": {
        "encoding": "inplace",
        "label": "struct BonuzTokens.Metadata",
        "members": [
          {
            "astId": 4205,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4207,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "tokenType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4209,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4211,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "desc",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4213,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "imageURL",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4215,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "isSoulBound",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 4217,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "redeemDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4219,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "expiryDate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4221,
            "contract": "contracts/BonuzTokens.sol:BonuzTokens",
            "label": "points",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}